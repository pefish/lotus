// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package distribute_prover

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistributeProverClient is the client API for DistributeProver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributeProverClient interface {
	GenerateWindowPoSt(ctx context.Context, in *GenerateWindowPoStRequest, opts ...grpc.CallOption) (*GenerateWindowPoStReply, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
}

type distributeProverClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributeProverClient(cc grpc.ClientConnInterface) DistributeProverClient {
	return &distributeProverClient{cc}
}

func (c *distributeProverClient) GenerateWindowPoSt(ctx context.Context, in *GenerateWindowPoStRequest, opts ...grpc.CallOption) (*GenerateWindowPoStReply, error) {
	out := new(GenerateWindowPoStReply)
	err := c.cc.Invoke(ctx, "/distribute_prover.DistributeProver/GenerateWindowPoSt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributeProverClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/distribute_prover.DistributeProver/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributeProverServer is the server API for DistributeProver service.
// All implementations should embed UnimplementedDistributeProverServer
// for forward compatibility
type DistributeProverServer interface {
	GenerateWindowPoSt(context.Context, *GenerateWindowPoStRequest) (*GenerateWindowPoStReply, error)
	Ping(context.Context, *PingRequest) (*PingReply, error)
}

// UnimplementedDistributeProverServer should be embedded to have forward compatible implementations.
type UnimplementedDistributeProverServer struct {
}

func (UnimplementedDistributeProverServer) GenerateWindowPoSt(context.Context, *GenerateWindowPoStRequest) (*GenerateWindowPoStReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateWindowPoSt not implemented")
}
func (UnimplementedDistributeProverServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

// UnsafeDistributeProverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributeProverServer will
// result in compilation errors.
type UnsafeDistributeProverServer interface {
	mustEmbedUnimplementedDistributeProverServer()
}

func RegisterDistributeProverServer(s grpc.ServiceRegistrar, srv DistributeProverServer) {
	s.RegisterService(&DistributeProver_ServiceDesc, srv)
}

func _DistributeProver_GenerateWindowPoSt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateWindowPoStRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributeProverServer).GenerateWindowPoSt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distribute_prover.DistributeProver/GenerateWindowPoSt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributeProverServer).GenerateWindowPoSt(ctx, req.(*GenerateWindowPoStRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributeProver_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributeProverServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distribute_prover.DistributeProver/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributeProverServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributeProver_ServiceDesc is the grpc.ServiceDesc for DistributeProver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributeProver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distribute_prover.DistributeProver",
	HandlerType: (*DistributeProverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateWindowPoSt",
			Handler:    _DistributeProver_GenerateWindowPoSt_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _DistributeProver_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "distribute_prover.proto",
}
